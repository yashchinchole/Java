section .data
	
    colon db ":"

	rmsg db 10, "Processor is in Real Mode"
	rmsgLen	equ $-rmsg

	pmsg db 10, "Processor is in Protected Mode"
	pmsgLen	equ $-pmsg

	gmsg db	10, "GDTR (Global Descriptor Table Register) : "
	gmsgLen	equ	$-gmsg

	imsg db	10, "IDTR (Interrupt Descriptor Table Register)	: "
	imsgLen	equ	$-imsg

	lmsg db	10, "LDTR (Local Descriptor Table Register)	: "
	lmsgLen	equ	$-lmsg

	tmsg db	10, "TR (Task Register) : "
	tmsgLen	equ	$-tmsg

	mmsg db	10, "MSW (Machine Status Word)	: "
	mmsgLen	equ	$-mmsg

; -----------------------------------------------------------

section .bss

    charAns resb 4
    GDTR resw 3
    IDTR resw 3
    LDTR resw 1
    TR resw  1
    MSW resw 1

; -----------------------------------------------------------

%macro print 2
    mov rax, 1
    mov rdi, 1
    mov rsi, %1
    mov rdx, %2
    syscall
%endmacro

%macro read 2
    mov rax, 0
    mov rdi, 0
    mov rsi, %1
    mov rdx, %2
    syscall
%endmacro

%macro exit 0
    mov rax, 60
    mov rdi, 0
    syscall
%endmacro

; -----------------------------------------------------------

section .text

    global _start

    _start:

    SMSW [MSW]
    mov rax, [MSW]
    ror rax, 1
    jc pmode 
    print rmsg, rmsgLen
    jmp next
    pmode:
    print pmsg, pmsgLen
    next:
    SGDT [GDTR]
    SIDT [IDTR]
    SLDT [LDTR]
    STR [TR]
    SMSW [MSW]

    print gmsg,gmsgLen
    mov ax, [GDTR+4]
    call display

    mov ax, [GDTR + 2]
    call display

    print colon, 1

    mov ax, [GDTR + 0]
    call display

    print imsg, imsgLen
    mov ax, [IDTR + 4]
    call display

    mov ax, [IDTR + 2]
    call display

    print colon, 1

    mov ax, [IDTR + 0]
    call display


    print lmsg, lmsgLen
    mov ax, [LDTR]
    call display

    print tmsg, tmsgLen
    mov ax, [TR]
    call display

    print mmsg, mmsgLen
    mov ax, [MSW]
    call display

    exit

; -----------------------------------------------------------

display:

    mov rbx, 16
    mov rcx, 4
    mov rsi, charAns + 3
    
    back:
        mov rdx, 0
        div rbx
        cmp dl, 09h
        jbe add30
        add dl, 07h
        
        add30:
            add dl, 30h
            
        mov [rsi], dl
        dec rsi
        dec rcx
        jnz back
        
    print charAns, 4
    
ret

; --------------------------------------------------------------------