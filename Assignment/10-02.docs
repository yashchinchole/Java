Q - What is a Constructor

A Constructor is a special type of method that is used to initialize the state of an object when it is created. It has the same name as the class and doesn't have any return type, not even void.

public class MyClass {
    public MyClass() {
        //Constructor body
    }
}

In the above example, MyClass is the constructor method for the class MyClass.



Q - What is Constructor Chaining

Sometimes, we need to provide multiple constructors for a class. In such cases, it is common to use constructor chaining. Simply put, constructor chaining is calling one constructor from another constructor.

public class MyClass {
  int num;
  String name;

  //Default Constructor
  public MyClass(){
    this(0, "Default");
  }

  //Parameterized Constructor
  public MyClass(int n, String s){
    num = n;
    name = s;
  }
}



Q - Can we call a subclass constructor from a superclass constructor

Yes, we can call a subclass constructor from the superclass constructor using the super() keyword.

public class SuperClass {
  public SuperClass(){
    System.out.println("SuperClass constructor!");
  }
}

public class SubClass extends SuperClass{
  public SubClass(){
    super();
    System.out.println("SubClass constructor!");
  }
}

In the above example, we are calling the SuperClass() constructor from the SubClass() constructor using super(). The output of the above code will be:

SuperClass constructor!
SubClass constructor!



Q - What happens if you keep a return type for a constructor

A constructor should never have a return type, not even void because,

A constructor's job is to create an instance of a class, i.e., it returns a new object of the class.
Constructors are called implicitly; there is no way to call them explicitly.
If we try to keep a return type for a constructor, then it will be treated as a regular method.

public class MyClass {
  int num;
  
  //Invalid construction with return type
  public int MyClass(){
    num = 0;
    return num;
  }
}

An Invalid constructor with return type shouldn't contain any constructor body.



Q - What is No-argument constructor

When there are no arguments in the constructor then it is called a no-argument constructor or default constructor like below:

public class MyClass {
  public MyClass() {
    //Constructor without argument or No-Arg constructor
  }
}



Q - How is a No-argument constructor different from the default Constructor

The terms "No-argument constructor" and "Default constructor" are often used interchangeably, but they have slightly different meanings.

A no-argument constructor is a constructor that takes no arguments. It is also known as a parameterless constructor. This type of constructor can be defined explicitly by the programmer in the class and can perform some initialization tasks when an instance is created. If the programmer does not define any constructors in the class, then the compiler automatically provides a no-argument constructor.

On the other hand, a default constructor is a term used to refer to a specific type of no-argument constructor that is automatically generated by the compiler only when there are no other constructors defined in a class. A default constructor does not accept any arguments, and its body is empty. It is used to create an object when no initializing values are needed for the object's member variables.

To conclude, while both no-argument constructor and default constructor do not take any arguments, the main difference is that the former can be explicitly defined by the programmer with custom code inside it or without it, while the latter is automatically provided by the compiler only if no other constructors are defined.



Q - When do we need Constructor Overloading

We use constructor overloading when we want to provide multiple ways of creating objects of a class with different parameters. We can achieve that by having multiple constructors in the class with different signature/parameters.

public class MyClass {
  int num;
  String name;

  //Default Constructor
  public MyClass(){
    num = 0;
    name = "Default";
  }

  //Parameterized Constructor
  public MyClass(int n, String s){
    num = n;
    name = s;
  }

  //Another Parameterized Constructor
  public MyClass(int n){
    num = n;
    name = "Unknown";
  }
}

In the above example, we are providing three constructors for our class MyClass. One is a default constructor which doesn't take in any arguments, the other one is a parameterized constructor, and the third one is another parameterized constructor.



Q - What is default constructor. Explain with an Example

If you don't provide any constructors within your class, then the java compiler automatically creates a default constructor with no-arguments. The access modifier would be the same as the class. (public).

public class MyClass {
  int num;
  String name;

  //Default Constructor
  public MyClass(){
    num = 0;
    name = "Default";
  }

  //Parameterized Constructor
  public MyClass(int n, String s){
    num = n;
    name = s;
  }
}

As you can see in the above code snippet, we are providing two constructors for our class MyClass. One is a default constructor which doesn't take in any arguments and the other one is a parameterized constructor.