section .data

    msg db "Conversion of BCD to HEX & HEX to BCD"
    msgLen equ $-msg
    
    hmsg db 10, 10, "HEX to BCD"
    hmsgLen equ $-hmsg
    
    ehmsg db 10, "Equivalent Hec Number : "
    ehmsgLen equ $-ehmsg

    emsg db "Error"
    emsgLen equ $-emsg

; --------------------------------------------------------------------------

section .bss

    buf resb 5
    ans resw 1
    charAns resb 16

; --------------------------------------------------------------------

%macro print 2
    mov rax, 1
    mov rdi, 1
    mov rsi, %1
    mov rdx, %2
    syscall
%endmacro

%macro read 2
    mov rax, 0
    mov rdi, 0
    mov rsi, %1
    mov rdx, %2
    syscall
%endmacro

%macro exit 0
    mov rax, 60
    mov rdi, 0
    syscall
%endmacro
    
; --------------------------------------------------------------------

section .text
    
    global _start
    
_start:

    print msg, msgLen
    print hmsg, hmsgLen
    call HEX2BCD
    exit

; --------------------------------------------------------------------

HEX2BCD:

    call accept
    mov ax, bx
    mov bx, 10 
    xor bp, bp

    back1:
    mov dx, 0
    div bx 
    push dx 
    inc bp 
    cmp ax, 0
    jne back1

    back2: 
    pop dx
    add dl, 30h
    mov [charAns], dl
    print charAns, 1
    dec bp 
    jnz back2

    ret

; --------------------------------------------------------------------

accept:
    print ehmsg, ehmsgLen
    read buf, 5
    mov rsi, buf
    mov rcx, 4
    mov bx, 0

    nextByte:
        shl bx, 4
        mov al, [rsi]
        cmp al, '0'
        jb error

    cmp al, '9'
    jbe sub30

    cmp al, 'A'
    jb error
    cmp al, 'F'
    jbe sub37

    cmp al, 'a'
    jb error
    cmp al, 'f'
    jbe sub57

    sub57: sub al, 20h
    sub37: sub al, 07h
    sub30: sub al, 30h

    add bx, ax 
    inc rsi 
    dec rcx 
    jnz nextByte

    ret
    error:
    print emsg, emsgLen

; --------------------------------------------------------------------

display:

    mov rbx, 16
    mov rcx, 4
    mov rsi, charAns + 3
    
    back:
        mov rdx, 0
        div rbx
        cmp dl, 09h
        jbe add30
        add dl, 07h
        
        add30:
            add dl, 30h
            
        mov [rsi], dl
        dec rsi
        dec rcx
        jnz back
        
    print charAns, 4
    
ret

; --------------------------------------------------------------------