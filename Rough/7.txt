section .data

    msg db "Block Transfer-Non overlapped with String instruction"
    msgLen equ $-msg
    
    bmsg db 10, 10, "Before Transfer"
    bmsgLen equ $-bmsg
    
    amsg db 10, 10, "After Transfer"
    amsgLen equ $-amsg
    
    smsg db 10, "Source Block : "
    smsgLen equ $-smsg
    
    dmsg db 10, "Destination Block : "
    dmsgLen equ $-dmsg
    
    space db " "
    
    sBlock db 18h, 25h, 26h, 37h, 41h
    dBlock times 5 db 0h
    
; --------------------------------------------------------------------

section .bss

    charAns resb 16

; --------------------------------------------------------------------

%macro print 2
    mov rax, 1
    mov rdi, 1
    mov rsi, %1
    mov rdx, %2
    syscall
%endmacro

%macro read 2
    mov rax, 0
    mov rdi, 0
    mov rsi, %1
    mov rdx, %2
    syscall
%endmacro

%macro exit 0
    mov rax, 60
    mov rdi, 0
    syscall
%endmacro
    
; --------------------------------------------------------------------

section .text
    
    global _start
    
_start:

    print msg, msgLen
    print bmsg, bmsgLen
    
    print smsg, smsgLen
    mov rsi, sBlock
    call blockDisplay
    
    print dmsg, dmsgLen
    mov rsi, dBlock
    call blockDisplay
    
    
    call blockTransfer
    
    
    print amsg, amsgLen
    
    print smsg, smsgLen
    mov rsi, sBlock
    call blockDisplay
    
    print dmsg, dmsgLen
    mov rsi, dBlock
    call blockDisplay
    
    exit
    
; --------------------------------------------------------------------

blockTransfer:
    
    mov rsi, sBlock
    mov rdi, dBlock
    mov rcx, 5
    
    back:
        cld
        rep movsb
        
    ret
    
; --------------------------------------------------------------------

blockDisplay:

    mov rbp, 5
    
    nextNum:
        mov al, [rsi]
        push rsi
        
        call display
        print space, 1
        pop rsi
        inc rsi
        dec rbp
        jnz nextNum
        
    ret    

; --------------------------------------------------------------------

display:

    mov rbx, 16
    mov rcx, 2
    mov rsi ,charAns + 1
    
    loop:
        mov rdx, 0
        div rbx
        cmp dl, 09h
        jbe add30
        add dl, 07h
        
        add30:
            add dl, 30h
        
        mov [rsi], dl
        dec rsi
        dec rcx
        jnz loop
        
    print charAns, 2
    
    ret
    
; --------------------------------------------------------------------